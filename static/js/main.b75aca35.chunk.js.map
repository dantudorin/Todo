{"version":3,"sources":["logo.svg","components/Header/Header.js","components/AddTask/AddTask.js","storage/actionTypes.js","components/Tasks/Task/Task.js","components/Tasks/Tasks.js","components/Filter/Filter.js","components/Footer/Footer.js","containers/Todo/Todo.js","App.js","serviceWorker.js","storage/reducer.js","index.js"],"names":["module","exports","Header","className","src","connect","state","tasks","dispatch","addTasks","objective","importance","type","props","formik","useFormik","initialValues","task","validationSchema","Yup","min","required","oneOf","onSubmit","values","alert","JSON","stringify","touched","handleSubmit","htmlFor","name","id","onChange","handleChange","value","disabled","selected","hidden","errors","style","border","onBlur","handleBlur","placeholder","Task","useState","renameState","setRenameState","newTask","changeObjective","done","rename","Card","width","display","background","backgroundColor","cardheaderImportance","fontWeight","color","Button","onClick","variant","renameBtn","Text","changeDoneState","defaultRender","filter","map","key","changeFilter","newFilter","event","target","Footer","href","Todo","App","Boolean","window","location","hostname","match","initialState","parse","localStorage","getItem","reducer","action","length","firstTask","concat","setItem","changedTasks","changedObjective","store","createStore","app","StrictMode","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b75aca35.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport './Header.css';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className = 'Header'>\r\n            <p className = \"Title\">Todo helps you organize your tasks better</p>\r\n            <img className = \"Image\" src=\"https://image.flaticon.com/icons/svg/148/148767.svg\"></img>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport { useFormik, yupToFormErrors } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport './AddTask.css';\r\nimport { connect } from 'react-redux';\r\nimport * as actionType from '../../storage/actionTypes';\r\n\r\nconst AddTask = (props) => {\r\n    const formik = useFormik({\r\n        initialValues: { task: '', importance: '' },\r\n        validationSchema: Yup.object({\r\n            task: Yup.string()\r\n                .min(15, 'Must be more than 15 characters long')\r\n                .required('Required'),\r\n\r\n            importance: Yup.string()\r\n                .oneOf(['Very important', 'High', 'Normal', 'Trivial'])\r\n                .required('Please select task importance')\r\n\r\n        }),\r\n        onSubmit: values => {\r\n            alert('Task : ' + JSON.stringify(values));\r\n            props.addTasks(values.task, values.importance);\r\n        }\r\n    });\r\n    formik.touched.importance = true;\r\n    return (\r\n        <form className=\"Form\" onSubmit={formik.handleSubmit}>\r\n            <div className=\"ImportanceSection\">\r\n                <label className=\"ImportanceLabel\" htmlFor=\"taskImportance\">Task importance :</label>\r\n                <select className=\"ImportanceDropdown\" name=\"importance\" id=\"taskImportance\" onChange={formik.handleChange} value={formik.values.importance}>\r\n                    <option value=\"\" disabled selected hidden>Please Choose...</option>\r\n                    <option value=\"Normal\">Normal</option>\r\n                    <option value=\"Very important\">Very important</option>\r\n                    <option value=\"High\">High</option>\r\n                    <option value=\"Trivial\">Trivial</option>\r\n                </select>\r\n            </div>\r\n            {formik.touched.importance && formik.errors.importance ? (\r\n                <div className=\"Error\">{formik.errors.importance}</div>\r\n            ) : null}\r\n            <textarea className=\"TextArea\"\r\n                style={formik.touched.task && formik.errors.task ? { border: '1.5px solid red' } : null}\r\n                name=\"task\"\r\n                type=\"textarea\"\r\n                onChange={formik.handleChange}\r\n                onBlur={formik.handleBlur}\r\n                value={formik.values.task}\r\n                placeholder=\"Add your task requirements\"\r\n            />\r\n\r\n            <button className=\"Button\" disabled={formik.touched.task && formik.errors.task ? true : false} type=\"submit\">Submit</button>\r\n            {formik.touched.task && formik.errors.task ? (\r\n                <div className=\"Error\">{formik.errors.task}</div>\r\n            ) : null}\r\n        </form>\r\n    );\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        addTasks: (objective, importance) => dispatch({\r\n            type: actionType.ADD_TODO,\r\n            objective: objective,\r\n            importance : importance\r\n        })\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({ tasks: state.tasks })\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddTask);","export const ADD_TODO = 'ADD_TODO';\r\nexport const CHANGE_DONE_STATE = 'CHANGE_DONE_STATE';\r\nexport const CHANGE_OBJECTIVE = 'CHANGE_OBJECTIVE';\r\nexport const CHANGE_FILTER = 'CHANGE_FILTER';","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './Task.css';\r\nimport { Card, Button } from 'react-bootstrap';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nconst Task = (props) => {\r\n\r\n    const [renameState, setRenameState] = useState(false);\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            newTask: props.task.objective,\r\n        },\r\n        validationSchema: Yup.object({\r\n            newTask: Yup.string()\r\n                .min(15, 'Must be 15 characters or less')\r\n                .required('Required'),\r\n        }),\r\n        onSubmit: values => {\r\n            props.changeObjective({ id: props.task.id, objective: values.newTask, done: props.task.done });\r\n            setRenameState(!renameState);\r\n        },\r\n    });\r\n\r\n    const renderRename = () => {\r\n        return (\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <textarea\r\n                    className='TextArea'\r\n                    name=\"newTask\"\r\n                    type=\"text\"\r\n                    onChange={formik.handleChange}\r\n                    onBlur={formik.handleBlur}\r\n                    value={formik.values.newTask}\r\n                />\r\n                {formik.touched.newTask && formik.errors.newTask ? (\r\n                    <div style={{ color: 'red' }}>{formik.errors.newTask}</div>\r\n                ) : null}\r\n                <Button className='CustomButton' onClick={rename} variant=\"danger\">CANCEL</Button>\r\n                <Button className='CustomButton' type=\"submit\" variant=\"success\" disabled={formik.touched.newTask && formik.errors.newTask ? true : false}>CONFIRM</Button>\r\n            </form>\r\n        );\r\n    }\r\n\r\n    const rename = () => {\r\n        setRenameState(!renameState);\r\n    }\r\n\r\n    const defaultRender = () => {\r\n        let renameBtn = props.task.done ? null : <Button className='CustomButton' onClick={rename} variant=\"outline-dark\">Rename</Button>;\r\n\r\n        return (\r\n            <div>\r\n                <Card.Text>\r\n                    {props.task.objective}\r\n                </Card.Text>\r\n                <Button className='CustomButton' variant=\"outline-dark\"\r\n                    onClick={props.task.done ? null : () => { props.changeDoneState(props.task.id) }}\r\n                    disabled={props.task.done ? true : null}>Done\r\n                </Button>\r\n                {renameBtn}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const cardheaderImportance = () => {\r\n        switch (props.task.importance) {\r\n            \r\n            case 'Very important' : return ('rgba(255, 221, 0, 1)');\r\n            case 'High' : return ('rgba(255, 119, 0, 1)');\r\n            case 'Trivial' : return ('rgba(255, 0, 0, 1)');\r\n            default : return ('lightblue');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Card className=\"CardColumn\" style={{\r\n            width: '18rem',\r\n            display: 'block',\r\n            border: props.task.done ? '2px solid green' : null,\r\n            background: props.task.done ? 'rgba(242, 177, 13, 0.07)' : null\r\n        }} >\r\n            <Card.Header style={{backgroundColor : cardheaderImportance(), fontWeight : 'bold', color : 'rgba(33, 33, 33, 1)'}}>\r\n                {props.task.importance}\r\n            </Card.Header>\r\n            {renameState ? renderRename() : defaultRender()}\r\n\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default Task;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actionType from '../../storage/actionTypes';\r\nimport './Tasks.css';\r\nimport Task from './Task/Task';\r\n\r\nconst Tasks = (props) => {\r\n\r\n    return (\r\n        <div className=\"Tasks\">\r\n            {!props.tasks ? <div className=\"Empty\">You don't have any tasks yet.</div> : null}\r\n            <div className='container'>\r\n                <div className='row'>\r\n                    {props.tasks ? props.tasks.filter(task => task.importance === props.filter || props.filter === 'No filter').map(task => {\r\n                        return (\r\n                            <div key = {task.id} className='col-sm-12 col-lg-4 '>\r\n                                <Task  \r\n                                task = {task} \r\n                                changeDoneState={props.changeDoneState}\r\n                                changeObjective={props.changeObjective}\r\n                                />\r\n                            </div>\r\n                        );\r\n                    }) : null}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        changeDoneState: (id) => dispatch({\r\n            type: actionType.CHANGE_DONE_STATE,\r\n            id: id\r\n        }),\r\n        \r\n        changeObjective: (task) => dispatch({\r\n            type : actionType.CHANGE_OBJECTIVE,\r\n            task : task\r\n        })\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => (\r\n    { \r\n        tasks: state.tasks,\r\n        filter: state.filter \r\n    });\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Tasks);","import React, {useState} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport * as actionType from '../../storage/actionTypes';\r\nimport './Filter.css';\r\n\r\nconst Filter = (props) => {\r\n    \r\n    return (\r\n        <div className=\"FilterTasks\">\r\n            <label className=\"FilterLabel\" htmlFor=\"Filter\">Filter by : </label>\r\n            <select value={props.filter} onChange={(event) => props.changeFilter(event.target.value)}>\r\n                    <option value=\"\" disabled selected hidden>Please Choose...</option>\r\n                    <option value=\"Normal\">Normal</option>\r\n                    <option value=\"Very important\">Very important</option>\r\n                    <option value=\"High\">High</option>\r\n                    <option value=\"Trivial\">Trivial</option>\r\n                    <option value=\"No filter\">No Filter</option>\r\n            </select>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        changeFilter: (newFilter) => dispatch({\r\n            type: actionType.CHANGE_FILTER,\r\n            filter: newFilter\r\n        })\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({ filter: state.filter })\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);","import React from 'react';\r\nimport './Footer.css';\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <div className=\"Footer \">\r\n            <div className=\"SocialGroup\">\r\n                <p> Like what you see? Let's get to know each other better </p>\r\n                <a href=\"https://www.facebook.com/dan.tudorin\" target=\"_blank\">\r\n                    <img src=\"https://image.flaticon.com/icons/png/512/145/145802.png\" className=\"Icon\" />\r\n                    \r\n                </a>\r\n                <a href=\"https://www.linkedin.com/in/tudorin-dan-47033713b/\" target=\"_blank\">\r\n                    <img src=\"https://image.flaticon.com/icons/png/512/1384/1384062.png\" className=\"Icon\" />\r\n                </a>\r\n                <a href=\"https://www.instagram.com/tudorind/?hl=en\" target=\"_blank\">\r\n                    <img src=\"https://image.flaticon.com/icons/svg/2111/2111463.svg\" className=\"Icon\" />\r\n                </a>\r\n            </div>\r\n            <div className=\"Copyright\">\r\n                @2020 created by : <strong>Tudorin Dan</strong>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Footer;","import React from 'react';\r\nimport Header from '../../components/Header/Header';\r\nimport AddTask from '../../components/AddTask/AddTask';\r\nimport Tasks from '../../components/Tasks/Tasks';\r\nimport Filter from '../../components/Filter/Filter';\r\nimport Footer from '../../components/Footer/Footer';\r\n\r\nconst Todo = () => {\r\n\r\n        return (\r\n            <div>\r\n                <Header />\r\n                <AddTask />\r\n                <Filter />\r\n                <Tasks />\r\n                <Footer />\r\n            </div>\r\n\r\n        );\r\n\r\n}\r\n\r\nexport default Todo;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Todo from './containers/Todo/Todo';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Todo />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as actionType from './actionTypes';\r\n\r\nconst initialState = {\r\n    filter : 'No filter',\r\n    tasks: JSON.parse(localStorage.getItem(\"tasks\"))\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case actionType.ADD_TODO:\r\n\r\n            const task = {\r\n                id : !state.tasks ? 0 : state.tasks.length,\r\n                objective: action.objective,\r\n                importance: action.importance,\r\n                done: false\r\n            }\r\n\r\n            if (!state.tasks) {\r\n                let firstTask = [].concat(task);\r\n                localStorage.setItem('tasks', JSON.stringify(firstTask));\r\n\r\n                return {\r\n                    filter : state.filter,\r\n                    tasks : firstTask\r\n                }\r\n            }\r\n\r\n            let tasks = state.tasks.concat(task);\r\n            localStorage.setItem('tasks', JSON.stringify(tasks));\r\n\r\n            return {\r\n                filter : state.filter,\r\n                tasks : tasks\r\n            }\r\n\r\n        case actionType.CHANGE_DONE_STATE : \r\n            let changedTasks = [].concat(state.tasks);\r\n            changedTasks[action.id].done = ! changedTasks[action.id].done;\r\n\r\n            localStorage.setItem('tasks', JSON.stringify(changedTasks));\r\n            return {\r\n                filter : state.filter,\r\n                tasks : changedTasks\r\n            }\r\n        \r\n        case actionType.CHANGE_OBJECTIVE : \r\n            let changedObjective = [].concat(state.tasks);\r\n            changedObjective[action.task.id].objective = action.task.objective;\r\n               \r\n            localStorage.setItem('tasks', JSON.stringify(changedObjective));\r\n            return {\r\n                filter : state.filter,\r\n                tasks : changedObjective\r\n            }\r\n        \r\n        case actionType.CHANGE_FILTER : \r\n            return {\r\n                filter : action.filter,\r\n                tasks : [].concat(state.tasks)\r\n            }\r\n\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport reducer from './storage/reducer';\n\nconst store = createStore(reducer);\n\nconst app = (\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>\n)\nReactDOM.render(app, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}